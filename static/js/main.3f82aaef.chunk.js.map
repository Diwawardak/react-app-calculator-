{"version":3,"sources":["components/Button.js","components/App.js","index.js"],"names":["Button","content","onButtonClick","type","className","onClick","App","useState","Date","time","value","setValue","memory","setMemory","operator","setOperator","buttonPress","num","parseFloat","toString","length","includes","getHours","padStart","getMinutes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f82aaef.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Button.css\";\n\nconst Button = ({ content, onButtonClick, type }) => {\n    return (\n       <div className={`button ${content === '0' ? 'zero' : ''} ${type || ''}`} \n       onClick={onButtonClick(content)}\n       >\n        {content}\n        </div>\n    );\n};\n\nexport default Button;","import React, { useState} from 'react';\nimport Button from './Button';\n\nimport './App.css';\n\nconst App = () => {\n    const [time, setTime] = useState(new Date());\n    const [value, setValue] = useState('0'); \n    const [memory, setMemory] = useState(null);\n    const [operator, setOperator] = useState(null);\n\n    const buttonPress = (content) => () => {\n        const num = parseFloat(value);\n\n        if (content === 'AC') {\n            setValue('0');\n            setMemory(null);\n            setOperator(null);\n            return;\n        }\n        if (content === '±') {\n            setValue((num * -1).toString());\n            return;\n        } \n\n        if (content === '%') {\n            setValue((num / 100).toString());\n            setMemory(null);\n            setOperator(null);\n            return;\n        }\n\n        if (content === '.') {\n            if (value.includes('.')) return;\n\n            setValue(value + '.');\n            return;\n        }\n\n\n\n        if (content === '+') {\n            if (operator !== null) {\n\n            if (operator === '+') {\n                setMemory(memory + parseFloat(value));\n            } else if (operator === '−') {\n                setMemory(memory - parseFloat(value));\n            } else if (operator === '×') {\n                setMemory(memory * parseFloat(value));\n            } else if (operator === '÷') {\n                setMemory(memory / parseFloat(value));\n            }\n        } else {\n            setMemory(parseFloat(value));\n        }\n            setValue('0');\n            setOperator('+');\n            return;\n\n        }\n\n\n\n        if (content === '−') {\n            if (operator !== null) {\n\n                if (operator === '+') {\n                    setMemory(memory + parseFloat(value));\n                } else if (operator === '−') {\n                    setMemory(memory - parseFloat(value));\n                } else if (operator === '×') {\n                    setMemory(memory * parseFloat(value));\n                } else if (operator === '÷') {\n                    setMemory(memory / parseFloat(value));\n                }\n            } else {\n                setMemory(parseFloat(value));\n            }\n            setValue('0');\n            setOperator('−');\n            return;\n\n        }\n\n\n\n        if (content === '×') {\n            if (operator !== null) {\n\n                if (operator === '+') {\n                    setMemory(memory + parseFloat(value));\n                } else if (operator === '−') {\n                    setMemory(memory - parseFloat(value));\n                } else if (operator === '×') {\n                    setMemory(memory * parseFloat(value));\n                } else if (operator === '÷') {\n                    setMemory(memory / parseFloat(value));\n                }\n            } else {\n                setMemory(parseFloat(value));\n            }\n            setValue('0');\n            setOperator('×');\n            return;\n\n        }\n\n\n\n\n        if (content === '÷') {\n            if (operator !== null) {\n\n                if (operator === '+') {\n                    setMemory(memory + parseFloat(value));\n                } else if (operator === '−') {\n                    setMemory(memory - parseFloat(value));\n                } else if (operator === '×') {\n                    setMemory(memory * parseFloat(value));\n                } else if (operator === '÷') {\n                    setMemory(memory / parseFloat(value));\n                }\n            } else {\n                setMemory(parseFloat(value));\n            }\n            setValue('0');\n            setOperator('÷');\n            return;\n\n        }\n\n\n\n        if (content === '=') {\n            if (!operator) return;\n\n            if (operator === '+') {\n                setValue((memory + parseFloat(value)).toString());\n            } else if (operator === '−') {\n                setValue((memory - parseFloat(value)).toString());\n            } else if (operator === '×') {\n                setValue((memory * parseFloat(value)).toString());\n            } else if (operator === '÷') {\n                setValue((memory / parseFloat(value)).toString());\n            }\n            setMemory(null);\n            setOperator(null);\n            return;\n        }\n\n            if (value[value.length - 1] === '.') {\n                setValue(value + content);\n            } else {\n                setValue(parseFloat(num + content).toString());\n            }\n };\n\n\n    return <div className=\"App\">\n        <div className=\"top\"></div>\n        <div className=\"time\">\n            {time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}\n            </div>\n        <div className=\"display\">{value}</div>\n        <div className=\"buttons\">\n        <Button onButtonClick={buttonPress} content=\"AC\" type=\"function\" />\n        <Button onButtonClick={buttonPress} content=\"±\" type=\"function\"/>\n        <Button onButtonClick={buttonPress} content=\"%\" type=\"function\"/>\n        <Button onButtonClick={buttonPress} content=\"÷\" type=\"operator\"/>\n        <Button onButtonClick={buttonPress} content=\"7\"/>\n        <Button onButtonClick={buttonPress} content=\"8\"/>\n        <Button onButtonClick={buttonPress} content=\"9\"/>\n        <Button onButtonClick={buttonPress} content=\"×\" type=\"operator\"/>\n        <Button onButtonClick={buttonPress} content=\"4\"/>\n        <Button onButtonClick={buttonPress} content=\"5\"/>\n        <Button onButtonClick={buttonPress} content=\"6\"/>\n        <Button onButtonClick={buttonPress} content=\"−\" type=\"operator\"/>\n        <Button onButtonClick={buttonPress} content=\"1\"/>\n        <Button onButtonClick={buttonPress} content=\"2\"/>\n        <Button onButtonClick={buttonPress} content=\"3\"/>\n        <Button onButtonClick={buttonPress} content=\"+\" type=\"operator\"/>\n        <Button onButtonClick={buttonPress} content=\"0\"/>\n        <Button onButtonClick={buttonPress} content=\".\"/>\n        <Button onButtonClick={buttonPress} content=\"=\" type=\"operator\"/>\n        </div>\n        \n        <div className=\"bottom\"></div>\n    </div>\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\";\n\n\nReactDOM.render(\n         <App />, \n        document.getElementById('root')\n);\n"],"sourceRoot":""}